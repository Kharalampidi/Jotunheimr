// Generated by CoffeeScript 1.10.0
var api, dms2dec, express, extname, librato, multer, s3, sentry, uuid;

express = require('express');

multer = require('multer');

dms2dec = require('dms2dec');

sentry = require('../lib/sentry');

librato = require('../lib/librato');

s3 = require('../lib/upload');

api = express.Router();

api.use(function(req, res, next) {
  librato.logRequest(req.method);
  res.once('close', function() {
    librato.logResponse('closed');
    return sentry.captureResClose(res);
  });
  res.once('finish', function() {
    return librato.logResponse(res.statusCode);
  });
  return next();
});

api.get('/', function(req, res, next) {
  return res.status(204).end();
});

uuid = require('uuid');

extname = require('path').extname;

multer = require('multer')({
  storage: require('multer').diskStorage({
    destination: require('os').tmpdir(),
    filename: function(req, file, cb) {
      return cb(null, uuid.v4() + '.' + extname(file.originalname).substr(1).toLowerCase());
    }
  })
});

api.post('/upload', multer.single('image'), function(req, res, next) {
  var error, t1;
  librato.logImageUpload();
  if (!/(jpe?g|png|gif)$/i.test(req.file.originalname)) {
    error = new Error("Invalid Image " + req.file.originalname);
    error.statusCode = 422;
    return next(error);
  }
  t1 = new Date().getTime();
  return s3.upload(req.file.path, {}, function(error, images, meta) {
    var i, image, len, ref, ref1;
    if (error) {
      return next(error);
    }
    librato.logImageProcessingTime(t1, new Date().getTime());
    if (((ref = meta.exif) != null ? ref.GPSLatitude : void 0) && ((ref1 = meta.exif) != null ? ref1.GPSLongitude : void 0)) {
      meta.geojson = {
        type: 'Point',
        coordinates: dms2dec(meta.exif.GPSLatitude, meta.exif.GPSLatitudeRef, meta.exif.GPSLongitude, meta.exif.GPSLongitudeRef).reverse()
      };
    }
    images = images.splice(0, images.length - 1);
    for (i = 0, len = images.length; i < len; i++) {
      image = images[i];
      image.aspect = void 0;
      image.awsImageAcl = void 0;
      image.key = void 0;
      image.maxHeight = void 0;
      image.maxWidth = void 0;
      image.path = void 0;
      image.suffix = void 0;
    }
    if (res._headerSent) {
      sentry.captureHeaderSent(req, images);
    }
    res.status(201);
    return res.json({
      meta: meta,
      versions: images
    });
  });
});

module.exports = api;
