// Generated by CoffeeScript 1.10.0
var assert, req, request;

assert = require('assert');

request = require('supertest');

req = request(require('../'));

describe('/CloudHealthCheck', function() {
  it('should return 200 for OPTIONS request', function(done) {
    return req.options('/CloudHealthCheck').expect(200).end(done);
  });
  return it('should return 200 for GET request', function(done) {
    return req.get('/CloudHealthCheck').expect(200).expect(function(res) {
      return assert.deepEqual(res.body, {
        message: 'System OK'
      });
    }).end(done);
  });
});

describe('CORS', function() {
  it('should send CORS headers', function(done) {
    return req.options('/').set('Origin', 'http://example1.com').expect(200).expect('Access-Control-Allow-Origin', 'http://example1.com').expect('Access-Control-Allow-Methods', 'GET, POST').expect('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type').expect('Access-Control-Expose-Headers', 'X-Response-Time').expect('Access-Control-Allow-Max-Age', 0).end(done);
  });
  return it('should deny non-allowed Origin', function(done) {
    return req.options('/').set('Origin', 'http://example3.com').expect(403).end(done);
  });
});

describe('Not Found', function() {
  it('should return 404 for non existing endpoint', function(done) {
    return req.get('/does/not/exist').expect(404).expect(function(res) {
      return assert.deepEqual(res.body, {
        message: 'Not Found'
      });
    }).end(done);
  });
  return it('should not return body for HEAD request', function(done) {
    return req.head('/does/not/exist').expect(404).expect(function(res) {
      return assert.deepEqual(res.body, '');
    }).end(done);
  });
});

describe('API v1', function() {
  return require('./routes/api_v1-spec');
});
