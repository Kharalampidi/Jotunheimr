// Generated by CoffeeScript 1.10.0
var app, base, compression, express, logger, origins, raven, ref, responseTime, sentry, url,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

if (process.env.NODE_ENV === 'production') {
  require('newrelic');
}

express = require('express');

logger = require('morgan');

url = require('url');

compression = require('compression');

responseTime = require('response-time');

raven = require('raven');

sentry = require('./lib/sentry');

if ((base = process.env).PORT_WWW == null) {
  base.PORT_WWW = 8080;
}

app = module.exports = express();

app.set('json spaces', 2);

app.set('x-powered-by', false);

app.use(compression());

app.use(responseTime());

if (app.get('env').toLowerCase() !== 'test') {
  app.use(logger('dev'));
}

origins = ((ref = process.env.ALLOW_ORIGINS) != null ? ref.split(',') : void 0) || [];

app.use(function(req, res, next) {
  var error, origin, ref1;
  if (req.get('Origin')) {
    origin = url.parse(req.get('Origin') || '');
    if (ref1 = origin.hostname, indexOf.call(origins, ref1) < 0) {
      error = new Error("Bad Origin Header " + (req.get('Origin')));
      error.statusCode = 403;
      return next(error);
    }
    res.set('Access-Control-Allow-Origin', req.get('Origin'));
    res.set('Access-Control-Allow-Methods', 'GET, POST');
    res.set('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type');
    res.set('Access-Control-Expose-Headers', 'X-Response-Time');
    res.set('Access-Control-Allow-Max-Age', 0);
  }
  if (req.method === 'OPTIONS' && req.path !== '/CloudHealthCheck') {
    return res.status(200).end();
  }
  return next();
});

app.all('/CloudHealthCheck', function(req, res, next) {
  res.status(200);
  if (req.method === 'HEAD') {
    return res.end();
  }
  return res.json({
    message: 'System OK'
  });
});

app.use('/', require('./routes/api_v1'));

app.use('/api/v1/', require('./routes/api_v1'));

app.get('/', function(req, res, next) {
  return res.redirect('/api/v1');
});

app.use(function(req, res, next) {
  return res.status(404).json({
    message: 'Not Found'
  });
});

app.use(raven.middleware.express(sentry));

app.use(function(err, req, res, next) {
  if (err.code === 'LIMIT_UNEXPECTED_FILE') {
    err.message = "Unknown form field \"" + err.field + "\"";
    err.statusCode = 400;
  }
  if (!err.statusCode || err.statusCode >= 500) {
    console.error(err);
    console.error(err.message);
    console.error(err.stack);
  }
  res.status(err.statusCode || 500);
  if (req.method === 'HEAD') {
    return res.end();
  }
  return res.json({
    message: err.message || 'Unknown error'
  });
});

if (!module.parent) {
  app.listen(process.env.PORT_WWW);
  console.log("Server is listening on port " + process.env.PORT_WWW);
}
